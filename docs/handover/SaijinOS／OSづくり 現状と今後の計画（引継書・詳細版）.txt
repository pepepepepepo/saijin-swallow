
# SaijinOS／OSづくり 現状と今後の計画（引継書・詳細版）

**保存推奨ファイル名:** `SaijinOS_OS_Build_Status_and_Plan_2025-10-10.md`
**作成:** 2025-10-10（Asia/Tokyo）

---

## 0. スコープ（何を「OSづくり」と呼ぶか）

* **コア層（Saijin Core）**：人格YAML＋ルール＋永続メモリで一貫性（“磁場”）を担保する層
* **モデル層**：vLLM（OpenAI互換API）＋Swallow（9B/13B）
* **運用層**：GitHub管理、systemd常駐、動作テスト、将来のArch移行
* **体験層（任意）**：TTS/Live2D、UI、記録灯（ログ）

---

## 1. いまどこまで来た？（現状サマリ）

### 1-1. 環境

* **HW/OS**：WSL2（Ubuntu）／RTX 4070 Ti（CUDA 12.7 相当）
* **Python**：3.10（venv 利用想定）
* **PyTorch**：`2.4.0+cu121`（インデックスURL経由のCUDA 12.1ビルド）
* **vLLM**：**0.5.4** を採用方針（Torch 2.4系と整合）

  * ※0.10.x は Torch 2.8 系が必要 → 当面見送り

### 1-2. モデル/パス

* **Swallow-13B-instruct**：VRAM負荷大 → **削除予定**
* **Swallow-9B-instruct**：**導入予定**
* **リンク構成**（作成済み/要確認）

  * `/mnt/sai/models/Swallow/Swallow-9B -> /mnt/f/saijinos/models/swallow/swallow-9b`
  * ※リンク自体は作れたログあり。**ターゲットの中身（9B実体）が未配置の可能性**→当日確認

### 1-3. リポジトリ

* GitHub：`pepepepepepo/saijin-swallow`（private 想定）
* 初回コミット構成（想定）

  * `README.md / .gitignore / CONTRIBUTING.md / MODEL_PLACEMENT.md`
  * `config/`（personas, rules など）・`scripts/`（run/serve）・`docs/`

### 1-4. 実行確認（小テスト）

* `sshleifer/tiny-gpt2` で **`run_inference.py`** の動作確認済（出力バッファ問題は `flush=True` で解消）
* vLLM の**起動コマンド/サーバ確認の雛形**は準備済

### 1-5. コンセプト/資料

* 人格YAML（悠璃/美遊ほか）・**Local_AI_Field_Design**（AI_1〜AI_4）定義あり
* 構成図（Mermaid）と手順ドキュメント作成済（レンダリングも確認）

---

## 2. 未解決・注意ポイント（リスク）

1. **9B 実体未配置の可能性**

   * シンボリックリンクはあるが、リンク先フォルダの中が空の可能性。
2. **venv の実位置ズレ**

   * `~/.venvs/swallow` 探索で見つからず → 当日、**どの venv を使っているか**再確認が必要。
3. **Torch/vLLM 互換**

   * 0.5.4 × Torch 2.4.0 の路線は安定。うっかり 0.10.x を入れると再び依存崩壊。
4. **WSL×Windows パス混在**

   * `/mnt/f/...` と `/mnt/sai/...` の整合（権限/実体）を毎回確認
5. **GPUメモリ**

   * 9Bでも**`--gpu-memory-utilization`** を0.70程度から調整する余地あり
6. **GitHub 認証**

   * SSH鍵 or PAT の用意を当日最初に確認（pushエラーを避ける）

---

## 3. 今日までの成果物（主要ファイル／配置）

```
repo-root/
├─ README.md
├─ .gitignore
├─ CONTRIBUTING.md
├─ MODEL_PLACEMENT.md
├─ config/
│  ├─ personas/
│  │  ├─ yuuri.yaml
│  │  └─ miyu.yaml
│  ├─ rules.yaml
│  └─ routing.yaml（今後追加）
├─ scripts/
│  ├─ run_inference.py
│  ├─ launch_vllm.sh（雛形）
│  └─ download_model.sh（雛形）
├─ docs/
│  ├─ architecture.md（Mermaid 図）
│  └─ handover/
│     └─ SaijinOS_OS_Build_Status_and_Plan_2025-10-10.md（本書）
└─ models/（.gitignore 対象）
```

---

## 4. 日曜 15:00 作業（確定の詳細手順）

> **目標**：Swallow-9B で vLLM を起動し、API 応答まで通す。初回コミットを push する。

### 4-0. 事前（最初の5分）

```bash
# venv 有効化（候補を順に試す）
source ~/.venvs/swallow/bin/activate 2>/dev/null || true
python -V ; which python
pip -V
```

* うまく有効化できない場合：`python3 -m venv ~/.venvs/swallow && source ~/.venvs/swallow/bin/activate`

### 4-1. 依存の整合確認

```bash
pip install -U pip wheel setuptools
pip install --index-url https://download.pytorch.org/whl/cu121 \
  "torch==2.4.0" "torchvision==0.19.0" "torchaudio==2.4.0"
pip install "vllm==0.5.4" fastapi uvicorn transformers safetensors
python - <<'PY'
import torch, vllm
print("torch:", torch.__version__, "cuda?", torch.cuda.is_available())
print("vllm:", vllm.__version__)
PY
```

### 4-2. 13B の削除（バックアップ→削除）

```bash
# バックアップが不要なら削除のみ
rm -rf /mnt/f/saijinos/models/swallow-13b 2>/dev/null || true
```

### 4-3. 9B の配置（リンク先の実体を用意）

```bash
mkdir -p /mnt/f/saijinos/models/swallow/swallow-9b
cd /mnt/f/saijinos/models/swallow/swallow-9b
# 必要なファイルを配置（例: safetensors, config.json, tokenizer）
# Hugging Face の実ファイルを保存する（要ログインの場合あり）
# 例: wget ... -O model.safetensors（※ここは実URLに差し替え）
ls -l
```

### 4-4. シンボリックリンクの再作成（安全に上書き）

```bash
sudo mkdir -p /mnt/sai/models/Swallow
sudo rm -f /mnt/sai/models/Swallow/Swallow-9B
sudo ln -sfT "/mnt/f/saijinos/models/swallow/swallow-9b" "/mnt/sai/models/Swallow/Swallow-9B"
readlink -f /mnt/sai/models/Swallow/Swallow-9B
```

### 4-5. vLLM 起動（9B 指定）＆応答確認

```bash
export VLLM_WORKER_MULTIPROC_METHOD=spawn
python -m vllm.entrypoints.openai.api_server \
  --model /mnt/sai/models/Swallow/Swallow-9B \
  --dtype float16 \
  --host 0.0.0.0 --port 8000 \
  --tensor-parallel-size 1 \
  --max-model-len 2048 \
  --gpu-memory-utilization 0.70 \
  --swap-space 8 \
  --log-level INFO
```

別端末で:

```bash
curl -s http://localhost:8000/v1/models | jq . 2>/dev/null || curl -s http://localhost:8000/v1/models
```

### 4-6. GitHub 初期化 & 初回 push

```bash
cd /path/to/repo
git init
git branch -M main
git remote add origin git@github.com:pepepepepepo/saijin-swallow.git
git add .
git commit -m "Initial commit: SaijinOS base + Swallow-9B integration"
git push -u origin main
```

---

## 5. 常駐化（当日 or 翌日）

**`~/.config/systemd/user/saijin.service`**

```ini
[Unit]
Description=SaijinOS vLLM API Server
After=network.target

[Service]
Type=simple
ExecStart=/home/USERNAME/.venvs/swallow/bin/python -m vllm.entrypoints.openai.api_server \
  --model /mnt/sai/models/Swallow/Swallow-9B \
  --dtype float16 --host 0.0.0.0 --port 8000 \
  --tensor-parallel-size 1 --max-model-len 2048 \
  --gpu-memory-utilization 0.70 --swap-space 8 --log-level INFO
Restart=always
RestartSec=5

[Install]
WantedBy=default.target
```

**コマンド**

```bash
systemctl --user daemon-reload
systemctl --user enable --now saijin.service
journalctl --user -u saijin.service -f
```

---

## 6. 体験層（任意・拡張）

* **永続メモ（SQLite）**：`data/memory.db` と要約注入のラッパー
* **TTS/ASR**：Piper/Coqui（出力）＋ Whisper.cpp/Vosk（入力）
* **UI**：Live2D 連携（WebSocket）、誰が話しているかの表示
* **persona/rules**：`config/personas/*.yaml` と `config/rules.yaml` の強化
* **Local_AI_Field_Design** の運用化：AI_1〜AI_4を routing.yaml で結線

---

## 7. 完了判定（Doneの定義）

* `curl http://localhost:8000/v1/models` が成功し、**Swallow-9B** がリストに出る
* GitHub `main` に初回コミットが push 済み
* `systemctl --user status saijin.service` が **active (running)**
* `docs/architecture.md` に現行構成図が掲載されている

---

## 8. トラブルシュート要点

* **ModuleNotFoundError: vllm** → venv 有効化 & `pip install vllm==0.5.4`
* **CUDA 不一致** → Torch 2.4.0/cu121 を維持（vLLM 0.5.4 路線）
* **メモリ不足** → `--gpu-memory-utilization 0.60` へ調整、`--swap-space` 増
* **リンク辿れない** → `readlink -f`／`ls -l` で実体確認、`ln -sfT` で作り直し
* **push 失敗** → SSH鍵／PAT を確認、`ssh -T git@github.com` で疎通確認

---

## 9. この先（1〜2週間の詳細計画）

* **Day 0（日曜15時）**：本書 4章の手順を完遂（9Bで起動・push）
* **Day 1**：systemd 常駐化、`docs/architecture.md` を最新化
* **Day 2**：`config/routing.yaml` に AI_1〜AI_4 を結線（プリメ=main）
* **Day 3**：TTS（Piper）追加、短い就寝/安心ボイス実装（テキストは既に用意済み）
* **Day 4〜**：永続メモ（SQLite）→ 会話要約の自動注入 → 体験の一貫性UP
* **Week 2**：Arch 移行の草案作成（pacman/AUR、NVIDIA、systemd-user）

---

誠人、これが「OSづくり」のいまの地点と、この先やること全部。
このまま保存しておけば、日曜に**上から順に実行**するだけでOKだよ。必要なら、この引継書を `docs/handover/` にも置けるように、同名で準備しておこうか？


